rename(player_id = player_1_id, player = player_1) %>%
arrange(player_id)
# get all matches with top 10 players at position 2
top_10_and_champs_mcp_matches_2 <- mcp_points %>%
filter(
player_2_id %in% top_10$id |
player_2_id %in% champions$id
) %>%
group_by(player_2_id, player_2) %>%
distinct(date, place, level) %>%
tally() %>%
rename(player_id = player_2_id, player = player_2) %>%
arrange(player_id)
# combine the two (not working yet)
top_10_and_champs_mcp_matches <- full_join(
top_10_and_champs_mcp_matches_1,
top_10_and_champs_mcp_matches_2 %>%
select(-player),
by = "player_id"
) %>%
mutate(matches_charted = n.x + n.y) %>%
select(-n.x, -n.y) %>%
left_join(
top_10_and_champs_match_stats %>%
group_by(player_id) %>%
tally() %>%
rename(matches_played = n),
by = "player_id"
) %>%
mutate(
percentage_charted = matches_charted / matches_played
) %>%
arrange(desc(percentage_charted))
# clean up
rm(top_10_and_champs_mcp_matches_1, top_10_and_champs_mcp_matches_2)
knitr::kable(
top_10_and_champs_mcp_matches %>%
mutate(percentage_charted = paste0(round(percentage_charted * 100), "%"))
)
player_id <- 3819
player_mcp_points <- mcp_points %>%
filter(
(PtWinner == 1 & player_1_id == player_id & isRallyWinner) |
(PtWinner == 2 & player_2_id == player_id & isRallyWinner) |
(PtWinner == 2 & player_1_id == player_id & isUnforced) |
(PtWinner == 1 & player_2_id == player_id & isUnforced)
) %>%
select(date, player_1, player_2, player_1_id, player_2_id, Rally, rallyCount, forehand_winner:volley_unforced) %>%
# leave away federer and reduce to column "opponent"
mutate(
player = ifelse(player_1_id == player_id, player_1, player_2),
opponent = ifelse(player_1_id == player_id, player_2, player_1)
) %>%
select(-player_1, -player_2, -player_1_id, -player_2_id)
player_mcp_points
colnames(player_mcp_points)
str(mcp_points)
player_mcp_points <- mcp_points %>%
filter(
(PtWinner == 1 & player_1_id == player_id & isRallyWinner) |
(PtWinner == 2 & player_2_id == player_id & isRallyWinner) |
(PtWinner == 2 & player_1_id == player_id & isUnforced) |
(PtWinner == 1 & player_2_id == player_id & isUnforced)
) %>%
select(date, level, player_1, player_2, player_1_id, player_2_id, Rally,
rallyCount, forehand_winner:volley_unforced) %>%
# leave away federer and reduce to column "opponent"
mutate(
player = ifelse(player_1_id == player_id, player_1, player_2),
opponent = ifelse(player_1_id == player_id, player_2, player_1)
) %>%
select(-player_1, -player_2, -player_1_id, -player_2_id)
player_mcp_points
colnames(mcp_points)
player_mcp_points <- mcp_points %>%
filter(
(PtWinner == 1 & player_1_id == player_id & isRallyWinner) |
(PtWinner == 2 & player_2_id == player_id & isRallyWinner) |
(PtWinner == 2 & player_1_id == player_id & isUnforced) |
(PtWinner == 1 & player_2_id == player_id & isUnforced)
) %>%
select(date, level, Tournament,
player_1, player_2, player_1_id, player_2_id, Rally,
rallyCount, forehand_winner:volley_unforced) %>%
# leave away federer and reduce to column "opponent"
mutate(
player = ifelse(player_1_id == player_id, player_1, player_2),
opponent = ifelse(player_1_id == player_id, player_2, player_1)
) %>%
select(-player_1, -player_2, -player_1_id, -player_2_id)
player_mcp_points
player_mcp_points %>%
group_by(player) %>%
summarise_at(vars(forehand_winner:volley_unforced), sum, na.rm = TRUE) %>%
# join all rallies by that player to calculate relative values
left_join(
player_mcp_points %>%
group_by(player) %>%
tally(),
by = "player"
)
player_mcp_points %>%
group_by(player) %>%
summarise_at(vars(forehand_winner:volley_unforced), sum, na.rm = TRUE) %>%
# join all rallies by that player to calculate relative values
left_join(
player_mcp_points %>%
group_by(player) %>%
tally(),
by = "player"
) %>% View()
player_mcp_points
str(mcp_points)
mcp_points$level
unique(mcp_points$level)
mcp_points
str(mcp_points)
str(mcp_points$Tournament)
unique(mcp_points$Tournament)
result <- player_mcp_points %>%
group_by(player) %>%
summarise_at(vars(forehand_winner:volley_unforced), sum, na.rm = TRUE) %>%
# join all rallies by that player to calculate relative values
left_join(
player_mcp_points %>%
group_by(player) %>%
tally(),
by = "player"
)
result
View(result)
player_mcp_points
str(player_mcp_points)
player_mcp_points <- mcp_points %>%
filter(
(PtWinner == 1 & player_1_id == player_id & isRallyWinner) |
(PtWinner == 2 & player_2_id == player_id & isRallyWinner) |
(PtWinner == 2 & player_1_id == player_id & isUnforced) |
(PtWinner == 1 & player_2_id == player_id & isUnforced)
)
player_mcp_points
# compare rally counts (lengths)
federer_mcp_rally_length <- federer_mcp_points %>%
select(rallyCount, player_1, player_2) %>%
mutate(opponent = ifelse(player_1 == "Roger_Federer", player_2, player_1)) %>%
select(-player_1, -player_2) %>%
group_by(opponent) %>%
summarise(rallyCount = mean(as.numeric(rallyCount)))
colnames(mcp_points)
str(mcp_points)
head(mcp_points)
# install deuce package for point-by-point data
# https://github.com/skoval/deuce
if (!require(ggradar)) {
devtools::install_github("ricardo-bion/ggradar")
library(ggradar)
}
# calculate serves / returns won over career for big 4
big_4_serve_return <- bind_rows(
top10_serve_stat_means %>%
filter(category == "serves_won") %>%
filter(player_id %in% big_4$id) %>%
group_by(name, category) %>%
summarise(value = mean(value, na.rm = TRUE)),
top10_return_stat_means %>%
filter(category == "returns_won") %>%
filter(player_id %in% big_4$id) %>%
group_by(name, category) %>%
summarise(value = mean(value, na.rm = TRUE))
)
big_4_under_pressure <- under_pressure_idx %>%
filter(player_id %in% big_4$id) %>%
left_join(top_10, by = c("player_id" = "id")) %>%
gather(category, value, under_pressure_index) %>%
select(-player_id)
big_4_strenghts <- bind_rows(
big_4_serve_return,
big_4_under_pressure,
big_4_mcp_values %>%
filter(key %in% c("forehand_quality", "backhand_quality")) %>%
rename(category = key, name = player)
) %>%
spread(category, value) %>%
group_by(1) %>%
mutate(
forehand = forehand_quality / max(forehand_quality),
backhand = backhand_quality / max(backhand_quality),
serve    = serves_won / max(serves_won),
return   = returns_won / max(returns_won),
pressure = under_pressure_index / max(under_pressure_index)
) %>%
select(name, forehand:pressure) %>%
gather(category, value, forehand:pressure)
ggplot(
data = big_4_strenghts,
aes(
x = category,
y = value
)
) +
coord_polar() +
geom_bar(stat = "identity") +
facet_wrap(~ name) +
theme_minimal() +
labs(
title = "Strengths and Weaknesses of the big 4",
subtitle = "Values are relative to best player in each category"
)
mcp_points
head(mcp_points)
knitr::kable(federer_mcp_match_integrity)
mcp_points
mcp_points %>% head()
mcp_points %>% tail()
data(mcp_points)
head(mcp_points)
tail(mcp_points)
cleanOutput <- T
foreigner.file <-  'input/merged_foreigners_1850_2016.csv'
swiss.file <- 'input/merged_Swisssforeigners_1850_2016.csv'
translation.file <- "input/Evolution of Swiss foreigners - Sheet1.csv"
library(RColorBrewer)
library(tidyr)
library(dplyr)
library(magrittr)
library(countrycode)
library(ggplot2)
library(scales)
library(swiMap)
library(swiTheme)
library(forcats)
library(knitr)
### Interactive
library(htmltools)
library(htmlwidgets)
library(shiny)
library(swiRcharts)
library(rCharts)
library(streamgraph)
sg_trbl <- c(7, 10, 29, 64)
nationality <- data.frame(
key =     c("Africa",  "Americas", "Asia",    'Oceania', "Unknown",   "Austria", "Turkey",  "Spain",   "France",   "Portugal", "Ex-Yugoslavia", "Germany", "Italy", "Other European country"),
col =     c("#ac673e", "#336666",  "#ab3d3f", "#996699", "#e5dbcd",   "#b3cccc", "#C87963", "#5879a3", "#303e6c",  "#87a1b8",  "#9db6c2",       "#708dad",  "#345284","#d9e6f2"),
colannot = c('#844F2F', '#bbdddd', '#5a2626', "white", "white",       "#5c8a8a"   , '#713828' , '#283F65', '#C9D6D6', '#304E75', '#3b535e',       'white', 'white', '#7a8c9f'),
x =       c(2000,      2005,        1998,      NA,         NA,         1910,        1998,      1972,      2014,        2014,      2000,            1907,      1972,     2014),
y =       c(300000,        375000,     436000,   NA,         NA,         792000,        578000,    714000,    720000,      811000,    1050000,       1025000,     1250000,  1970000),
size =    c('0.8em',   '0.8em',      '0.8em',  NA,        NA,          '0.75em',      '0.72em',   '0.72em',   '0.72em',   '0.85em',  '0.95em',         '1.3em',      '1.3em',   '1em' )
, stringsAsFactors = F)
annotation <- data.frame(x = as.Date("1910-01-01"), label = "sadfdsaf asdfsdaf")
data.read <- read.csv(foreigner.file)
setwd("~/swissinfo/2017_Q1/2016_12_13_evolutionForeigners")
data.read <- read.csv(foreigner.file)
data.read
tail(data.read)
data.read %>% group_by(nationality) %>% summarise(max(year))
swi_libWidget_overwrite
original <- list.files(dirPath, "streamgraph.js", full.names = T, recursive = T)
original <- list.files(".", "streamgraph.js", full.names = T, recursive = T)
original
original <- list.files(".", "streamgraph.js", full.names = T, recursive = T) %>% gsub("\\.js$", "_rtl.js")
original <- list.files(".", "streamgraph.js", full.names = T, recursive = T) %>% gsub("\\.js$", "_rtl\\.js")
original <- list.files(".", "streamgraph.js", full.names = T, recursive = T)
original <-  gsub("\\.js$", "_rtl\\.js", original)
original
cleanOutput <- T
foreigner.file <-  'input/merged_foreigners_1850_2016.csv'
swiss.file <- 'input/merged_Swisssforeigners_1850_2016.csv'
translation.file <- "input/Evolution of Swiss foreigners - Sheet1.csv"
library(RColorBrewer)
library(tidyr)
library(dplyr)
library(magrittr)
library(countrycode)
library(ggplot2)
library(scales)
library(swiMap)
library(swiTheme)
library(forcats)
library(knitr)
### Interactive
library(htmltools)
library(htmlwidgets)
library(shiny)
library(swiRcharts)
library(rCharts)
library(streamgraph)
sg_trbl <- c(7, 10, 29, 64)
nationality <- data.frame(
key =     c("Africa",  "Americas", "Asia",    'Oceania', "Unknown",   "Austria",   "Turkey",   "Spain",   "France",   "Portugal", "Ex-Yugoslavia", "Germany", "Italy", "Other European country"),
col =     c("#ac673e", "#336666",  "#ab3d3f", "#996699", "#e5dbcd",   "#b3cccc",   "#C87963",  "#5879a3", "#303e6c",  "#87a1b8",  "#9db6c2",       "#708dad",  "#345284","#d9e6f2"),
colannot = c('#844F2F', '#99cccc', '#5a2626', "white", "white",       "#5c8a8a"   , '#713828' , '#283F65', '#C9D6D6', '#304E75', '#3b535e',       'white', 'white', '#7a8c9f'),
x =       c(2010,      2003,        2000,      NA,         NA,         1913,        2003,       1973,      2014.5,        2014,      2014,            1907,      1972,     2014),
y =       c(50000,        375000,     444000,   NA,         NA,         799000,        578000,    716000,    640000,      811000,    1070000,       1040000,     1250000,  1970000),
size =    c('0.8em',   '0.8em',      '0.8em',  NA,        NA,          '0.75em',      '0.72em',   '0.72em',   '0.72em',   '0.85em',  '0.95em',         '1.3em',      '1.3em',   '1em' )
, stringsAsFactors = F)
annotation <- data.frame(x = as.Date("1910-01-01"), label = "sadfdsaf asdfsdaf")
data.read <- read.csv(foreigner.file)
txt <- loadTranslation(translation.file)
for(lang in colnames(txt)) {
ddd <- data.read
stopifnot(nrow(nationality) == length(unique(ddd$nationality)), all(ddd$nationality %in% nationality$key))
ddd$nationality <- factor(txt[as.character(ddd$nationality), lang], levels = txt[nationality$key, lang])
stopifnot(!any(is.na(ddd$nationality)))
annot <- nationality
annot$key <- txt[annot$key, lang]
annotations <- apply(annot %>% filter(!is.na(x)), 1, function(l) {
paste0("sg_annotate(label = \"", l['key'], "\", x = '", as.Date( l['x'], format = "%Y"), "', y = ", as.numeric(l['y']), ", color = '", l['colannot'], "', size = '",  l['size'], "')")
})
annotations <- paste0(annotations, collapse = " %>% ")
# order the colors to assume alphabetical ordering of the categories
# and remove accents!
col.idx <- match(sort(txt[nationality$key, lang]), txt[nationality$key, lang])
## 1st streamgraph : foreigners layers are stacked based on the levels
sg <- streamgraph(ddd, nationality, value, year, top = sg_trbl[1], right = sg_trbl[2], bottom = sg_trbl[3], left = sg_trbl[4], height = 550) %>%
sg_fill_manual(values = annot$col[col.idx]) %>%
sg_axis_x(tick_interval = 20)
sga <- eval(parse(text = paste0(" sg %>% ", annotations)))
# sga <- sga %>% sg_annotate(label = txt['descr', lang], x = as.Date("1855-01-01"), y = 2000000, color = 'black', size = "18")
sga$sizingPolicy$defaultWidth <- "100%"
sga$sizingPolicy$padding <- 1
#sg
saveWidget(sga, file = "streamgraph_tmp.html", selfcontained = FALSE, libdir = "js")
html.grabbed <- grab_widgetHTML("streamgraph_tmp.html")
html.code <- html.grabbed[['html']]
istart <- min(grep("script", html.code))
iend <- max(grep("</head>", html.code))
header <- html.code[istart:iend-1]
## 2nd streamgraph share foreigners
data.for <- read.csv(swiss.file)
data.for$shareFor <- round((data.for$Foreigner / (data.for$Foreigner + data.for$Swiss)), 3)
# make the data long
data.for %<>% select(year, shareFor)
data.for$group <- 'share'
sgb <- streamgraph(data.for, group, shareFor, year,
top = 6, right = sg_trbl[2], bottom = -2, left = sg_trbl[4],
height = 110, offset = "zero", interactive = F) %>%
sg_fill_manual(values = c('#66717f', 'red')) %>%
sg_axis_y(tick_format = ",%")# %>%
# sg_annotate(label = txt['title2', lang], x = as.Date("2014-01-01"), y = 0.012, color = '#e6f7ff', size = 15)
#sgb
sgb$sizingPolicy$defaultWidth <- "100%"
sgb$sizingPolicy$padding <- 1
saveWidget(sgb, file = "streamgraph2_tmp.html", selfcontained = FALSE, libdir = "js")
html.grabbed2 <- grab_widgetHTML("streamgraph2_tmp.html")
html.code2 <- html.grabbed2[['html']]
istart2 <- min(grep("script", html.code))
iend2 <- max(grep("</head>", html.code))
header2 <- html.code[istart:iend-1]
## wrap into HTML page
source <- paste0(
txt["source", lang], ": ", txt["source.name", lang],
" | ", txt["code", lang], ": ", htmlLink("https://github.com/hrbrmstr/streamgraph", "streamgraphR"),
" | ", htmlLink("https://twitter.com/duc_qn", "@duc_qn"), " | ",
htmlLink("http://www.swissinfo.ch", "swissinfo.ch"))
save_html(
tags$html(
dir = ifelse(lang == "AR", "rtl", "ltr"),
tags$head(
HTML(paste0("<link href='https://fonts.googleapis.com/css?family=Open+Sans+Condensed:300,700,300italic&subset=latin,cyrillic' rel='stylesheet' type='text/css'> <meta name='viewport' content='width=device-width, initial-scale=1, maximum-scale=1'>",
paste0(header, collapse =""), collapse =""))),
tags$body(
h2(HTML(txt['main.title', lang])),
div(class = "descr", HTML(paste0(txt['descr', lang], " <em>", txt['descr2', lang], "</em>"))),
h3(HTML(txt['h3', lang])),
div(class = "container", HTML(html.code[html.grabbed[['istart']]:html.grabbed[['iend']]])),
h4(HTML( txt['title2', lang])),
div(class = "container", HTML(html.code2[html.grabbed2[['istart']]:html.grabbed2[['iend']]])),
div(id = "footer", HTML(txt['footer', lang])),
div(id = "cite", HTML(source)),
HTML(iframeresizer)
)), file = paste0("streamgraph_foreignersEvolution_", lang, ".html"), libdir = "js"
)
suppressWarnings(swi_libWidget_overwrite())
}
# original <- list.files(".", "streamgraph.js", full.names = T, recursive = T)
# dest.path <-  gsub("\\.js$", "_rtl\\.js", original)
dirPath <- "."
getwd()
list.files(system.file("extdata", package="swiRcharts"),
"streamgraph_rtl.js", full.names = T)
original <- list.files(dirPath, "streamgraph.js", full.names = T, recursive = T)
original
dirname(original)
file.copy( from = list.files(system.file("extdata", package="swiRcharts"),
"streamgraph_rtl.js", full.names = T), to = dirname(original), overwrite = T)
file.path(dirname(original),"streamgraph_rtl.js")
cleanOutput <- T
foreigner.file <-  'input/merged_foreigners_1850_2016.csv'
swiss.file <- 'input/merged_Swisssforeigners_1850_2016.csv'
translation.file <- "input/Evolution of Swiss foreigners - Sheet1.csv"
library(RColorBrewer)
library(tidyr)
library(dplyr)
library(magrittr)
library(countrycode)
library(ggplot2)
library(scales)
library(swiMap)
library(swiTheme)
library(forcats)
library(knitr)
### Interactive
library(htmltools)
library(htmlwidgets)
library(shiny)
library(swiRcharts)
library(rCharts)
library(streamgraph)
sg_trbl <- c(7, 10, 29, 64)
nationality <- data.frame(
key =     c("Africa",  "Americas", "Asia",    'Oceania', "Unknown",   "Austria",   "Turkey",   "Spain",   "France",   "Portugal", "Ex-Yugoslavia", "Germany", "Italy", "Other European country"),
col =     c("#ac673e", "#336666",  "#ab3d3f", "#996699", "#e5dbcd",   "#b3cccc",   "#C87963",  "#5879a3", "#303e6c",  "#87a1b8",  "#9db6c2",       "#708dad",  "#345284","#d9e6f2"),
colannot = c('#844F2F', '#99cccc', '#5a2626', "white", "white",       "#5c8a8a"   , '#713828' , '#283F65', '#C9D6D6', '#304E75', '#3b535e',       'white', 'white', '#7a8c9f'),
x =       c(2010,      2003,        2000,      NA,         NA,         1913,        2003,       1973,      2014.5,        2014,      2014,            1907,      1972,     2014),
y =       c(50000,        375000,     444000,   NA,         NA,         799000,        578000,    716000,    640000,      811000,    1070000,       1040000,     1250000,  1970000),
size =    c('0.8em',   '0.8em',      '0.8em',  NA,        NA,          '0.75em',      '0.72em',   '0.72em',   '0.72em',   '0.85em',  '0.95em',         '1.3em',      '1.3em',   '1em' )
, stringsAsFactors = F)
annotation <- data.frame(x = as.Date("1910-01-01"), label = "sadfdsaf asdfsdaf")
data.read <- read.csv(foreigner.file)
txt <- loadTranslation(translation.file)
for(lang in colnames(txt)) {
ddd <- data.read
stopifnot(nrow(nationality) == length(unique(ddd$nationality)), all(ddd$nationality %in% nationality$key))
ddd$nationality <- factor(txt[as.character(ddd$nationality), lang], levels = txt[nationality$key, lang])
stopifnot(!any(is.na(ddd$nationality)))
annot <- nationality
annot$key <- txt[annot$key, lang]
annotations <- apply(annot %>% filter(!is.na(x)), 1, function(l) {
paste0("sg_annotate(label = \"", l['key'], "\", x = '", as.Date( l['x'], format = "%Y"), "', y = ", as.numeric(l['y']), ", color = '", l['colannot'], "', size = '",  l['size'], "')")
})
annotations <- paste0(annotations, collapse = " %>% ")
# order the colors to assume alphabetical ordering of the categories
# and remove accents!
col.idx <- match(sort(txt[nationality$key, lang]), txt[nationality$key, lang])
## 1st streamgraph : foreigners layers are stacked based on the levels
sg <- streamgraph(ddd, nationality, value, year, top = sg_trbl[1], right = sg_trbl[2], bottom = sg_trbl[3], left = sg_trbl[4], height = 550) %>%
sg_fill_manual(values = annot$col[col.idx]) %>%
sg_axis_x(tick_interval = 20)
sga <- eval(parse(text = paste0(" sg %>% ", annotations)))
# sga <- sga %>% sg_annotate(label = txt['descr', lang], x = as.Date("1855-01-01"), y = 2000000, color = 'black', size = "18")
sga$sizingPolicy$defaultWidth <- "100%"
sga$sizingPolicy$padding <- 1
#sg
saveWidget(sga, file = "streamgraph_tmp.html", selfcontained = FALSE, libdir = "js")
html.grabbed <- grab_widgetHTML("streamgraph_tmp.html")
html.code <- html.grabbed[['html']]
istart <- min(grep("script", html.code))
iend <- max(grep("</head>", html.code))
header <- html.code[istart:iend-1]
## 2nd streamgraph share foreigners
data.for <- read.csv(swiss.file)
data.for$shareFor <- round((data.for$Foreigner / (data.for$Foreigner + data.for$Swiss)), 3)
# make the data long
data.for %<>% select(year, shareFor)
data.for$group <- 'share'
sgb <- streamgraph(data.for, group, shareFor, year,
top = 6, right = sg_trbl[2], bottom = -2, left = sg_trbl[4],
height = 110, offset = "zero", interactive = F) %>%
sg_fill_manual(values = c('#66717f', 'red')) %>%
sg_axis_y(tick_format = ",%")# %>%
# sg_annotate(label = txt['title2', lang], x = as.Date("2014-01-01"), y = 0.012, color = '#e6f7ff', size = 15)
#sgb
sgb$sizingPolicy$defaultWidth <- "100%"
sgb$sizingPolicy$padding <- 1
saveWidget(sgb, file = "streamgraph2_tmp.html", selfcontained = FALSE, libdir = "js")
html.grabbed2 <- grab_widgetHTML("streamgraph2_tmp.html")
html.code2 <- html.grabbed2[['html']]
istart2 <- min(grep("script", html.code))
iend2 <- max(grep("</head>", html.code))
header2 <- html.code[istart:iend-1]
## wrap into HTML page
source <- paste0(
txt["source", lang], ": ", txt["source.name", lang],
" | ", txt["code", lang], ": ", htmlLink("https://github.com/hrbrmstr/streamgraph", "streamgraphR"),
" | ", htmlLink("https://twitter.com/duc_qn", "@duc_qn"), " | ",
htmlLink("http://www.swissinfo.ch", "swissinfo.ch"))
save_html(
tags$html(
dir = ifelse(lang == "AR", "rtl", "ltr"),
tags$head(
HTML(paste0("<link href='https://fonts.googleapis.com/css?family=Open+Sans+Condensed:300,700,300italic&subset=latin,cyrillic' rel='stylesheet' type='text/css'> <meta name='viewport' content='width=device-width, initial-scale=1, maximum-scale=1'>",
paste0(header, collapse =""), collapse =""))),
tags$body(
h2(HTML(txt['main.title', lang])),
div(class = "descr", HTML(paste0(txt['descr', lang], " <em>", txt['descr2', lang], "</em>"))),
h3(HTML(txt['h3', lang])),
div(class = "container", HTML(html.code[html.grabbed[['istart']]:html.grabbed[['iend']]])),
h4(HTML( txt['title2', lang])),
div(class = "container", HTML(html.code2[html.grabbed2[['istart']]:html.grabbed2[['iend']]])),
div(id = "footer", HTML(txt['footer', lang])),
div(id = "cite", HTML(source)),
HTML(iframeresizer)
)), file = paste0("streamgraph_foreignersEvolution_", lang, ".html"), libdir = "js"
)
swi_libWidget_overwrite()
}
# original <- list.files(".", "streamgraph.js", full.names = T, recursive = T)
# dest.path <-  gsub("\\.js$", "_rtl\\.js", original)
if(cleanOutput) {
files <- c("streamgraph_foreignersEvolution_.*html", "js")
if(!dir.exists("output/bak")) {
dir.create("output/bak")
} else {
list.files("output/bak/", full.names = T, recursive = T) %>% file.remove()
}
ori.files <- list.files("output", full.names = T)[list.files("output") != "bak"]
file.copy(ori.files, to = "output/bak/", recursive = T)
unlink(ori.files, recursive = T)
files_tomove <- lapply(files, function(x) list.files(pattern = x)) %>% unlist()
file.copy(files_tomove, "output", recursive = T)
unlink(files_tomove, recursive = T)
}
